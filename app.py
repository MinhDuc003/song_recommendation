import streamlit as st
import pandas as pd
import joblib
from sklearn.metrics.pairwise import cosine_similarity

# Load d·ªØ li·ªáu & m√¥ h√¨nh
df = pd.read_csv("data/cleaned_songs.csv")
tfidf_vectorizer = joblib.load("models/tfidf_vectorizer.pkl")
tfidf_matrix = joblib.load("models/tfidf_matrix.pkl")

st.title("üéµ Song Recommendation System")
st.write("G·ª£i √Ω b√†i h√°t d·ª±a tr√™n t√™n b√†i h√°t ho·∫∑c l·ªùi b√†i h√°t b·∫°n nh·∫≠p.")

# Tabs: T√™n b√†i h√°t ho·∫∑c Lyrics
tab1, tab2 = st.tabs(["üîç G·ª£i √Ω theo t√™n b√†i h√°t", "üìù G·ª£i √Ω theo l·ªùi b√†i h√°t"])

with tab1:
    input_title = st.text_input("Nh·∫≠p t√™n b√†i h√°t b·∫°n y√™u th√≠ch:")
    top_k = st.slider("S·ªë b√†i h√°t g·ª£i √Ω", 1, 10, 5, key="slider1")

    if st.button("G·ª£i √Ω b√†i h√°t", key="by_title"):
        from recommend import recommend_song
        if input_title:
            cosine_sim = joblib.load("models/cosine_sim.pkl")
            recommendations = recommend_song(input_title, df, cosine_sim, top_k=top_k)
            if isinstance(recommendations, str):
                st.warning(recommendations)
            else:
                st.success("üéß G·ª£i √Ω b√†i h√°t:")
                sim_scores = cosine_sim[df[df['song'].str.lower() == input_title.lower()].index[0]]
                recommendations = recommendations.copy()
                recommendations["similarity (%)"] = [
                    f"{sim_scores[i]*100:.1f}%" for i in recommendations.index
                ]
                st.dataframe(recommendations.reset_index(drop=True))

        else:
            st.info("Vui l√≤ng nh·∫≠p t√™n b√†i h√°t!")

with tab2:
    input_lyrics = st.text_area("Nh·∫≠p m·ªôt ƒëo·∫°n l·ªùi b√†i h√°t:")
    top_k = st.slider("S·ªë b√†i h√°t g·ª£i √Ω", 1, 10, 5)

    if st.button("G·ª£i √Ω b√†i h√°t", key="by_lyrics"):
        if input_lyrics.strip():
            input_vec = tfidf_vectorizer.transform([input_lyrics])
            sim_scores = cosine_similarity(input_vec, tfidf_matrix).flatten()
            sim_indices = sim_scores.argsort()[::-1][:top_k]

            seen = set()
            results = []
            for i in sim_indices:
                title = df.iloc[i]['song'].strip().lower()
                artist = df.iloc[i]['artist'].strip().lower()
                key = (title, artist)
                if key not in seen:
                    seen.add(key)
                    results.append(i)
                if len(results) == top_k:
                    break

            if results:
                st.success("üéß C√°c b√†i h√°t b·∫°n c√≥ th·ªÉ s·∫Ω th√≠ch:")
                results_data = []
                for i in results:
                    sim = sim_scores[i] * 100
                    results_data.append({
                        "song": df.iloc[i]['song'],
                        "artist": df.iloc[i]['artist'],
                        "similarity (%)": f"{sim:.1f}%"
                    })

                st.dataframe(pd.DataFrame(results_data))

            else:
                st.warning("Kh√¥ng t√¨m th·∫•y b√†i h√°t t∆∞∆°ng t·ª±.")
        else:
            st.info("Vui l√≤ng nh·∫≠p l·ªùi b√†i h√°t!")
